library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.types.all;

entity memory_arbiter is
    port (
        cpuport1_mem_in : in memory_in;
        cpuport1_mem_out : out memory_out;
            
        cpuport2_mem_in : in memory_in;
        cpuport2_mem_out : out memory_out;
            
        ma_to_mem : out memory_in;   
        mem_to_ma : in memory_out;
        
        clk : in std_logic;
        reset : in std_logic
        );
end entity memory_arbiter;
    
architecture behaviour of memory_arbiter is
    type state_type is (port1grant,port2grant);
    signal current_state, next_state : state_type := port1grant;
    signal dummy_out : memory_out := (x"ffffffff", '0');
    signal dummy_in, lastSentTransaction : memory_in := (x"ffffffff", '0', '0', x"ffffffff");
	signal port2_mem_access, port1_mem_access, already_sending, memory_access : std_logic := '0';
begin
   
  ma_to_mem <=    cpuport1_mem_in when current_state = port1grant and cpuport2_mem_in.enable = '0' and memory_access = '0' else
                  cpuport2_mem_in when current_state = port2grant else
                  lastSentTransaction;
  
  cpuport1_mem_out <= mem_to_ma when current_state = port1grant else dummy_out;
               
  cpuport2_mem_out <= mem_to_ma when current_state = port2grant else dummy_out;
  
  process(clk)
  begin
	if clk'event and clk = '1' then
		if current_state = port1grant and cpuport1_mem_in.enable = '1' and mem_to_ma.rdy = '0' then
			memory_access <= '1';
			lastSentTransaction <= cpuport1_mem_in;
		elsif current_state = port2grant and cpuport2_mem_in.enable = '1' and mem_to_ma.rdy = '0' then
			memory_access <= '1';
			lastSentTransaction <= cpuport1_mem_in;
		elsif mem_to_ma.rdy = '1' then
			memory_access <= '0';
			lastSentTransaction <= memory_in_0;
		else
			memory_access <= '0';
			lastSentTransaction <= lastSentTransaction;
		end if;
	end if;
  end process;
  
  
  state_process : process (clk, reset)
  begin
    if reset = '1' then
            current_state <= port1grant;
    elsif rising_edge (clk) then
            current_state <= next_state;
    end if;
  end process state_process;
    
    next_state_decode : process (current_state, cpuport1_mem_in.enable, cpuport2_mem_in.enable)
    begin
        case current_state is
            when port1grant => 
                if cpuport2_mem_in.enable = '1' and memory_access = '0' then
                    next_state <= port2grant;
                else
                    next_state <= port1grant;
                end if;
            when others =>
                if cpuport2_mem_in.enable = '0' then
                    next_state <= port1grant;
                else
                    next_state <= port2grant;
                end if;
        end case;
  end process next_state_decode;
end architecture behaviour; 


  -- process (cpuport1_mem_in, cpuport2_mem_in, mem_to_ma, reset)
  -- begin
	-- if reset = '1' then
		-- port2_mem_access <= '0';
		-- port1_mem_access <= '0';
		-- already_sending <= '0';
		-- cpuport1_mem_out <= memory_out_0;
		-- cpuport2_mem_out <= memory_out_0;
		-- lastSentTransaction <= memory_in_0;
	-- else
		-- if mem_to_ma.rdy = '1' then
			-- if port2_mem_access = '1' then
				-- cpuport2_mem_out <= mem_to_ma;
				-- port2_mem_access <= '0';
			-- else
				-- cpuport1_mem_out <= memory_out_0;
				-- port2_mem_access <= '0';
			-- end if;
			
			-- if port1_mem_access = '1' then
				-- cpuport1_mem_out <= mem_to_ma;
				-- port1_mem_access <= '0';
			-- else
				-- cpuport1_mem_out <= memory_out_0;
				-- port1_mem_access <= '0';
			-- end if;
			-- already_sending <= '0';
		-- else
			-- cpuport1_mem_out <= memory_out_0;
			-- cpuport2_mem_out <= memory_out_0;
			-- port2_mem_access <= port2_mem_access;
			-- port1_mem_access <= port1_mem_access;
		-- end if;
		
		-- if already_sending = '0' then
			-- if cpuport2_mem_in.enable = '1' then
				-- lastSentTransaction <= cpuport2_mem_in;
				-- ma_to_mem <= cpuport2_mem_in;
				-- port2_mem_access <= '1';
				-- port1_mem_access <= '0';
				-- already_sending <= '1';
			-- elsif cpuport1_mem_in.enable = '1'  then
				-- lastSentTransaction <= cpuport1_mem_in;
				-- ma_to_mem <= cpuport1_mem_in;
				-- port2_mem_access <= '0';
				-- port1_mem_access <= '1';
				-- already_sending <= '1';
			-- else
				-- ma_to_mem <= lastSentTransaction;
				-- already_sending <= '1';
				-- lastSentTransaction <= lastSentTransaction;
			-- end if;
		-- else
			-- ma_to_mem <= lastSentTransaction;
			-- already_sending <= already_sending;
			-- lastSentTransaction <= lastSentTransaction;
			-- port2_mem_access <= port2_mem_access;
			-- port1_mem_access <= port1_mem_access;
		-- end if;
	-- end if;
  -- end process;                
                          
    
-- library IEEE;
-- use IEEE.std_logic_1164.all;
-- use IEEE.numeric_std.all;
-- use work.types.all;

-- entity memory_arbiter is
  -- port (
    -- port_1_out : in memory_in;
    -- port_1_in : out memory_out;
    
    -- port_2_out : in memory_in;
    -- port_2_in : out memory_out;
    
    -- memory_input : out memory_in;
    -- memory_output : in memory_out;
    
    -- clk : in std_logic;
    -- reset : in std_logic
    -- );
-- end memory_arbiter;

-- architecture behavioral of memory_arbiter is
   -- type state_type is (service_port1, service_port2);
   -- signal current_state : state_type := service_port1;
   -- signal next_state : state_type;
-- begin

--calculating next port grant depending on the inputs
-- next_state_logic: process (current_state, port_2_out.enable, port_1_out.enable, memory_output.rdy)
-- begin
	-- case current_state is
		-- when service_port1 => 
						-- if port_2_out.enable = '1' and memory_output.rdy = '0' then
							-- next_state <= service_port2;
						-- else
							-- next_state <= service_port1;
						-- end if;
		-- when others => 
						-- if port_2_out.enable = '0' then
							-- next_state <= service_port1;
						-- else
							-- next_state <= service_port2;
						-- end if;
		-- end case;
-- end process;

--assigning the current state to next state
-- process (clk)
-- begin
	-- if clk'event and clk = '1' then
		-- if reset = '1' then
			-- current_state <= service_port1;
		-- else
			-- current_state <= next_state;
		-- end if;
	-- end if;
-- end process;

-- memory_input <= memory_in_0 when current_state = service_port1 and port_1_out.enable = '1' and port_2_out.enable = '1' else
                -- port_1_out when current_state = service_port1  else
                -- port_2_out when current_state = service_port2  else
				        -- memory_in_0;

-- port_1_in <= memory_output when current_state = service_port1 else memory_out_0;
             
-- port_2_in <= memory_output when current_state = service_port2 else memory_out_0;

-- end behavioral;